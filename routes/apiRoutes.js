const express = require('express');  // imports express
const apiRouter = express.Router();  // creates an instance of the Express object
const fs = require('fs');  // gives access to file system module which allows us to read/write files
const path = require('path');  // gives access to the path module which gives access to file pathing
const uuid = require('uuid');  // imports uuid npm package

// this will happen when the GET api/notes route is executed; read all notes from db.json file when api/notes is in the url; for example http://localhost:3001/notes; then parse the data
apiRouter.get('/notes', (req, res) => {  // when the GET api/notes route is executed
    let data = fs.readFileSync(path.join(__dirname, '..', '/develop/db/db.json'));  // the db.json file will be read also
    res.json(JSON.parse(data));  //  response is the data parsed as json
});

// when the save button is clicked, the POST api/notes route is executed; 
apiRouter.post('/notes', (req, res) => {  // when the POST api/notes route is executed
    let notes = JSON.parse(fs.readFileSync(path.join(__dirname, '..', '/develop/db/db.json'), 'utf8'));  // reads the db.json file and parse it as JSON and assign it to the variable notes
    let newNote = { id: uuid.v4(), ...req.body };  // Creates a new note object by adding a unique id property generated by uuid version 4 and spreading ALL properties from req.body
    notes.push(newNote);  // adding the newNote object to the notes[]; this is the saved notes
    fs.writeFileSync(path.join(__dirname, '..', '/develop/db/db.json'), JSON.stringify(notes));  // writes the updated array to the db file
    res.json(newNote);  // sends the newNote object as a json formatted response
});

// added delete functionality for the trash can icon
apiRouter.delete('/notes/:id', (req, res) => {  // the delete button will target the unique ID of the note within the db.json file
    let notes = JSON.parse(fs.readFileSync(path.join(__dirname, '..', '/develop/db/db.json')));  // reads the db.json file, parse it as JSON and assigns it to the variable notes
    notes = notes.filter(note => note.id !== req.params.id);  // filter() method targets the note with the matching id parameter and removes it; the function checks if the "id" property of each note object is not equal to the "id" parameter passed in the request's URL (req.params.id). If the "id" property of a note object does not match the "id" parameter, that note object is included in the returned array
    fs.writeFileSync(path.join(__dirname, '..', '/develop/db/db.json'), JSON.stringify(notes));  // writes the updated notes[] to the db.json file
    res.json({ message: `Note with id: ${req.params.id} deleted.` });  // sends a message in json format that confirms the note with its unique ID defined has been deleted; this can be viewed in chrome dev tools under the network tab, click on the unique ID under the name column, then choose to view the response
}); 

module.exports = apiRouter;  // this allows the apiRouter routes to be exported to other files for usage